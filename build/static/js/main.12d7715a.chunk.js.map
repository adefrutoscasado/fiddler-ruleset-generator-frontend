{"version":3,"sources":["components/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["JsonLoader","onChangeJson","onStartProcessing","onReaderLoad","file","data","JSON","parse","target","result","name","onChange","info","reader","FileReader","onload","readAsText","onChangeFile","showUploadList","multiple","beforeUpload","accept","UploadOutlined","Content","Layout","Header","Footer","Sider","initDownload","a","document","createElement","body","appendChild","style","fileName","console","time","href","download","timeEnd","click","App","useState","loadedJson","setLoadedJson","zipExport","setZipExport","mocksPath","setMocksPath","useJsonOnSuccess","setUseJsonOnSuccess","loading","setLoading","className","placement","title","InfoCircleOutlined","event","value","checked","onClick","exportOptions","generateZipRuleset","type","zip","process","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wYAsCaA,EAAa,SAAC,GAGA,IAAD,IAFxBC,oBAEwB,MAFT,aAES,IADxBC,kBASA,IAAMC,EAAqC,SAACC,GAC1C,IAAMC,EAAOC,KAAKC,MAAMH,EAAKI,OAAOC,QACpCR,EAAaI,IAOf,OACE,kBAAC,IAAD,CAAQK,KAAK,OAAOC,SALC,SAACC,IAXxB,SAAsBR,GACpB,IAAMS,EAAS,IAAIC,WACnBD,EAAOE,OAASZ,EAChBU,EAAOG,WAAWZ,GASlBa,CAAaL,EAAKR,OAI4Bc,gBAAc,EAACC,UAAU,EAAOC,aAAc,kBAAM,GAAOC,OAAQ,wBAC/G,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,MADF,sB,SCtDyBC,GAAYC,IAAnCC,OAAmCD,IAA3BE,OAA2BF,IAAnBG,MAAmBH,IAAZD,SAEzBK,EAAgB,WACpB,IAAIC,EAAIC,SAASC,cAAc,KAI/B,OAHAD,SAASE,KAAKC,YAAYJ,GAE1BA,EAAEK,MAAQ,gBACH,SAAU7B,EAAc8B,GAC7BC,QAAQC,KAAK,iBACbR,EAAES,KAAO,+BAAiCjC,EAC1CwB,EAAEU,SAAWJ,EACbC,QAAQI,QAAQ,iBAChBX,EAAEY,SAVgB,GAyFPC,MA3Ef,WAAgB,IAAD,EACuBC,mBAAS,MADhC,mBACNC,EADM,KACMC,EADN,OAEqBF,mBAAS,MAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGqBJ,mBAAS,aAH9B,mBAGNK,EAHM,KAGKC,EAHL,OAImCN,oBAAS,GAJ5C,mBAINO,EAJM,KAIYC,EAJZ,OAKiBR,oBAAS,GAL1B,mBAKNS,EALM,KAKGC,EALH,KA0Cb,OACE,kBAAC,IAAD,KACE,kBAAC9B,EAAD,CAAS+B,UAAU,WACjB,kBAAC,IAAD,CAASC,UAAU,QAAQC,MAAO,sFAChC,6BACE,qEAA2C,MAAM,kBAACC,EAAA,EAAD,SAGrD,yBAAKH,UAAW,cACd,kBAAC,EAAD,CAAYrD,aAzBC,SAACI,GACpBwC,EAAcxC,OA0BV,6BACA,kBAAC,IAAD,CAASkD,UAAU,QAAQC,MAAO,6GAChC,qDAGF,6BACE,kBAAC,IAAD,CAAO7C,SAzBW,SAAC+C,GACzBT,EAAaS,EAAMlD,OAAOmD,QAwBgBA,MAAOX,KAE7C,6BACE,kBAAC,IAAD,CAASO,UAAU,QAAQC,MAAO,2HAChC,kBAAC,IAAD,CAAU7C,SAzBI,WACtBwC,GAAoB,SAAAD,GAAgB,OAAKA,MAwBIU,QAASV,GAA9C,mDAGJ,yBAAKI,UAAW,cACd,kBAAC,IAAD,CAAQO,QA5DU,WACxBd,EAAa,MACA,uCAAG,8BAAAlB,EAAA,6DACdwB,GAAW,GACLS,EAAgB,CACpBd,YACAE,oBAJY,kBAOMa,IAAmBnB,EAAY,CAAEoB,KAAM,UAAYF,GAPzD,OAONG,EAPM,OAQZlB,EAAakB,GARD,yEAWZZ,GAAW,GAXC,4EAAH,oDAcba,IA4C0CC,UAAWvB,EAAYQ,QAASA,GAApE,YACA,kBAAC,IAAD,CAAQS,QAtCQ,WACtBjC,EAAakB,EAAW,kBAqCgBqB,UAAWrB,EAAWM,SAAUR,GAAcQ,GAAhF,gBC9EUgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7C,SAAS8C,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.12d7715a.chunk.js","sourcesContent":["\r\nimport React, { ChangeEvent } from 'react'\r\nimport { Button, Upload } from 'antd';\r\nimport 'antd/dist/antd.css'\r\nimport { UploadOutlined } from '@ant-design/icons';\r\n\r\ninterface InputFileJsonProps {\r\n  onChangeJson?: (json: object) => void\r\n  onStartProcessing?: (...args: any) => void\r\n}\r\n\r\n// Basic HTML uploader\r\nexport const InputFileJson = ({\r\n  onChangeJson = () => { },\r\n  onStartProcessing = () => { }\r\n}: InputFileJsonProps) => {\r\n\r\n  function onChangeFile(event: ChangeEvent<HTMLInputElement>) {\r\n    if (event.target?.files?.[0]) {\r\n      const reader = new FileReader()\r\n      reader.onload = onReaderLoad\r\n      reader.readAsText(event.target.files[0])\r\n    }\r\n  }\r\n\r\n  const onReaderLoad: FileReader['onload'] = (event) => {\r\n    if (typeof event?.target?.result === 'string') {\r\n      const data = JSON.parse(event.target.result)\r\n      onChangeJson(data as object)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <input onChange={onChangeFile} type=\"file\"></input>\r\n  )\r\n}\r\n\r\n// Fancy antd uploader\r\nexport const JsonLoader = ({\r\n  onChangeJson = () => { },\r\n  onStartProcessing = () => { }\r\n}: InputFileJsonProps) => {\r\n\r\n  function onChangeFile(file: File) {\r\n    const reader = new FileReader()\r\n    reader.onload = onReaderLoad\r\n    reader.readAsText(file)\r\n  }\r\n\r\n  const onReaderLoad: FileReader['onload'] = (file: any) => {\r\n    const data = JSON.parse(file.target.result)\r\n    onChangeJson(data as object)\r\n  }\r\n\r\n  const onChangeUpload = (info: any) => {\r\n    onChangeFile(info.file)\r\n  }\r\n\r\n  return (\r\n    <Upload name='file' onChange={onChangeUpload} showUploadList multiple={false} beforeUpload={() => false} accept={'application/har+json'} >\r\n      <Button>\r\n        <UploadOutlined /> Upload HAR file\r\n      </Button>\r\n    </Upload>\r\n  )\r\n}","import React, { useState, ChangeEvent } from 'react'\r\nimport { Button, Input, Checkbox, Layout, Tooltip } from 'antd'\r\nimport 'antd/dist/antd.css'\r\nimport generateZipRuleset from 'fiddler-ruleset-generator'\r\nimport { JsonLoader } from './components'\r\nimport { InfoCircleOutlined } from '@ant-design/icons';\r\nconst { Header, Footer, Sider, Content } = Layout\r\n\r\nconst initDownload = (function () {\r\n  let a = document.createElement(\"a\")\r\n  document.body.appendChild(a)\r\n  // @ts-ignore\r\n  a.style = \"display: none\"\r\n  return function (data: string, fileName: string) {\r\n    console.time('starts base64');\r\n    a.href = \"data:application/zip;base64,\" + data //Image Base64 Goes here\r\n    a.download = fileName //File name Here\r\n    console.timeEnd('starts base64');\r\n    a.click() //Downloaded file\r\n  }\r\n}())\r\n\r\nfunction App() {\r\n  const [loadedJson, setLoadedJson] = useState(null as null | object)\r\n  const [zipExport, setZipExport] = useState(null as null | any)\r\n  const [mocksPath, setMocksPath] = useState('C:/mocks/' as undefined | string)\r\n  const [useJsonOnSuccess, setUseJsonOnSuccess] = useState(true as boolean)\r\n  const [loading, setLoading] = useState(false as boolean)\r\n\r\n  const generateZipExport = () => {\r\n    setZipExport(null)\r\n    const process = async () => {\r\n      setLoading(true)\r\n      const exportOptions = {\r\n        mocksPath,\r\n        useJsonOnSuccess\r\n      }\r\n      try {\r\n        const zip = await generateZipRuleset(loadedJson, { type: 'base64' }, exportOptions)\r\n        setZipExport(zip)\r\n      } catch (error) {\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n    process()\r\n  }\r\n\r\n  const onChangeJson = (data: object) => {\r\n    setLoadedJson(data)\r\n  }\r\n\r\n  const onClickDownload = () => {\r\n    initDownload(zipExport, 'generated.zip')\r\n  }\r\n\r\n  const onChangeMocksPath = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setMocksPath(event.target.value)\r\n  }\r\n\r\n  const onChangeUseJson = () => {\r\n    setUseJsonOnSuccess(useJsonOnSuccess => !useJsonOnSuccess)\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Content className='content'>\r\n        <Tooltip placement=\"right\" title={'All process is executed at client-side, no information will be sent to any server.'}>\r\n          <div>\r\n            <span>Select a HAR file from your computer{'   '}<InfoCircleOutlined /></span>\r\n          </div>\r\n        </Tooltip>\r\n        <div className={'row-center'}>\r\n          <JsonLoader onChangeJson={onChangeJson} />\r\n        </div>\r\n        <div>\r\n        <Tooltip placement=\"right\" title={'The path where you should place the generated mocks. Fiddler will read from here the generated responses.'}>\r\n          <span>Path of the mocks</span>\r\n        </Tooltip>\r\n        </div>\r\n        <div>\r\n          <Input onChange={onChangeMocksPath} value={mocksPath} />\r\n        </div>\r\n        <div>\r\n          <Tooltip placement=\"right\" title={'This option will create mocks in json format, that are easier to modify to test different cases (200 OK respones only).'}>\r\n            <Checkbox onChange={onChangeUseJson} checked={useJsonOnSuccess}>Use json files for application/json responses</Checkbox>\r\n          </Tooltip>\r\n        </div>\r\n        <div className={'row-center'}>\r\n          <Button onClick={generateZipExport} disabled={!loadedJson} loading={loading}>Generate</Button>\r\n          <Button onClick={onClickDownload} disabled={!zipExport} loading={!loadedJson && loading}>Download</Button>\r\n        </div>\r\n      </Content>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}